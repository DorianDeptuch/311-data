# flake8: noqa

# -*- coding: utf-8 -*-
"""LA NC Geo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tCCHZDS2udKXlePIgezV_9cKQsRG681h
"""

from os.path import join, dirname
import glob

import geopandas

DATA_FOLDER = join(dirname(__file__), 'data')
list_of_files = glob.glob(join(DATA_FOLDER, "nc-boundary-geojson-*.json"))

DATA_FILE = max(list_of_files)

with open(DATA_FILE, "r") as read_file:
    council_df = geopandas.read_file(read_file)

council_df['council_name'] = council_df['name'].apply(lambda x: x.replace(' NC', '').replace('NC ', '').replace(' NDC', '').replace(' CC', '').title())
council_df.drop(columns=['name', 'objectid'])

# clean up names and index
council_df['council_id'] = council_df['nc_id'].astype(int)
council_df['region_id'] = council_df['service_re'].str.extract('(\d+)')
council_df = council_df[['council_id', 'council_name', 'waddress', 'dwebsite', 'certified', 'region_id', 'geometry', 'service_re']]
council_df.set_index('council_id', inplace=True)
council_df.sort_index(inplace=True)

# projecting to california zone 5 map before getting the center and converting back to WGS 84
council_df['centroid'] = council_df.geometry.to_crs('EPSG:26945').centroid.to_crs('EPSG:4326')
council_df['latitude'] = council_df.centroid.y
council_df['longitude'] = council_df.centroid.x


"""Following code exports NC IDs as CSV file and JSON file"""

# export a CSV with the centroids
with open(join(DATA_FOLDER, "councils_data.csv"), "w") as write_file:
    council_df.drop(columns=['geometry']).to_csv(write_file)


council_df

"""# Regions
Turn the council list into region geometries and get centroids
"""

# create regions_df from nc list
regions_df = council_df.dissolve(by='region_id')
regions_df.reset_index(inplace=True)
regions_df = regions_df.drop(columns=['waddress', 'dwebsite', 'certified'])
regions_df['region_name'] = regions_df['service_re'].apply(lambda x: x.replace('REGION ', '').title())

# create ID column and set as index
regions_df['region_id'] = regions_df['region_name'].str.extract('(\d+)')
regions_df['region_id'] = regions_df['region_id'].astype(int)
regions_df.set_index('region_id', inplace=True)
regions_df.sort_index(inplace=True)

# clean up region names
regions_df['region_name'] = regions_df['region_name'].astype(str)
regions_df['region_name'] = regions_df['region_name'].str.replace('(\d+) - ', '', regex=True)
regions_df['region_name'] = regions_df['region_name'].str.replace('La', 'LA')
regions_df = regions_df.drop(columns=['service_re'])
regions_df = regions_df[['region_name', 'geometry']]

# make centroids
regions_df['centroid'] = regions_df.geometry.to_crs('EPSG:26945').centroid.to_crs('EPSG:4326')
regions_df['latitude'] = regions_df.centroid.y
regions_df['longitude'] = regions_df.centroid.x


with open(join(DATA_FOLDER, "regions_data.csv"), "w") as write_file:
    regions_df.drop(columns=['geometry']).to_csv(write_file)
